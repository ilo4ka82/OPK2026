"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
"""
import logging
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from ...database import authorize_user, get_user
from ...utils import escape_markdown_v2, admin_required, AdminMessages
from ...config import TimesheetConfig

logger = logging.getLogger(__name__)


@admin_required
async def admin_authorize_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /admin_authorize - –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.
    
    Usage: /admin_authorize USER_ID
    """
    admin_user = update.effective_user
    
    if not context.args:
        text_to_send = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\\.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin\\_authorize `USER_ID`"
        await update.message.reply_text(text_to_send, parse_mode=ParseMode.MARKDOWN_V2)
        return
    
    try:
        user_id_to_authorize = int(context.args[0])
        success, message_from_db = authorize_user(user_id_to_authorize, admin_user.id)
        
        await update.message.reply_text(
            escape_markdown_v2(message_from_db),
            parse_mode=ParseMode.MARKDOWN_V2
        )
        
        if success and "—É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" in message_from_db:
            target_user_info = get_user(user_id_to_authorize)
            if target_user_info:
                try:
                    await context.bot.send_message(
                        chat_id=user_id_to_authorize,
                        text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_authorize}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_authorize}: {e}")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_authorize} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                
    except ValueError:
        text_to_send = "Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\\.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin\\_authorize `USER_ID`"
        await update.message.reply_text(text_to_send, parse_mode=ParseMode.MARKDOWN_V2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_authorize_command: {e}", exc_info=True)
        await update.message.reply_text(
            escape_markdown_v2("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."),
            parse_mode=ParseMode.MARKDOWN_V2
        )