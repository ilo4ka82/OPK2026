"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–º–µ—Ç–∫—É –ø—Ä–∏—Ö–æ–¥–∞.
"""
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.constants import ParseMode
import pytz

from ...database import (
    get_pending_manual_checkin_requests,
    get_manual_checkin_request_by_id,
    approve_manual_checkin_request,
    approve_all_pending_manual_checkins,
    reject_manual_checkin_request,
)
from ...utils import (
    admin_required,
    validate_datetime_format,
    AdminMessages,
    TimesheetMessages,
    escape_markdown_v2,
)
from ...states import AdminManualCheckinStates

logger = logging.getLogger(__name__)
MOSCOW_TZ = pytz.timezone('Europe/Moscow')


@admin_required
async def admin_manual_checkins_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
    –ö–æ–º–∞–Ω–¥–∞: /admin_manual_checkins
    """
    admin_user_id = update.effective_user.id
    logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Ä—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–º–µ—Ç–∫—É.")

    pending_requests = get_pending_manual_checkin_requests()

    if not pending_requests:
        await update.message.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä—É—á–Ω—É—é –æ—Ç–º–µ—Ç–∫—É –ø—Ä–∏—Ö–æ–¥–∞.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    message_lines = ["<b>üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä—É—á–Ω—É—é –æ—Ç–º–µ—Ç–∫—É –ø—Ä–∏—Ö–æ–¥–∞:</b>\n"]

    keyboard = []

    for req in pending_requests:
        request_id = req['request_id']
        user_id = req['user_id']
        full_name = req.get('application_full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
        username = req.get('username', 'N/A')
        requested_time = req['requested_checkin_time']

        display_username = f"@{username}" if username != 'N/A' else f"ID {user_id}"

        message_lines.append(
            f"üÜî <b>–ó–∞—è–≤–∫–∞ #{request_id}</b>\n"
            f"   üë§ {full_name} ({display_username})\n"
            f"   ‚è∞ –í—Ä–µ–º—è: {requested_time}\n"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
        keyboard.append([
            InlineKeyboardButton(
                f"‚úÖ –û–¥–æ–±—Ä–∏—Ç—å #{request_id}",
                callback_data=f"manual_approve:{request_id}"
            ),
            InlineKeyboardButton(
                f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å #{request_id}",
                callback_data=f"manual_edit:{request_id}"
            ),
            InlineKeyboardButton(
                f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å #{request_id}",
                callback_data=f"manual_reject:{request_id}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(
            "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –í–°–ï –∑–∞—è–≤–∫–∏",
            callback_data="manual_approve_all"
        )
    ])

    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manual_cancel")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)
    message_text = "\n".join(message_lines)

    await update.message.reply_text(
        text=message_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

    return AdminManualCheckinStates.LIST_REQUESTS


async def process_manual_request_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞: –æ–¥–æ–±—Ä–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å, –æ—Ç–∫–ª–æ–Ω–∏—Ç—å.
    """
    query = update.callback_query
    await query.answer()

    callback_data_str = query.data
    admin_user_id = query.from_user.id

    try:
        # === –û–¢–ú–ï–ù–ê ===
        if callback_data_str == "manual_cancel":
            await query.edit_message_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            context.user_data.clear()
            return ConversationHandler.END

        # === –ú–ê–°–°–û–í–û–ï –û–î–û–ë–†–ï–ù–ò–ï ===
        elif callback_data_str == "manual_approve_all":
            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –Ω–∞—á–∞–ª –º–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Ä—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")

            approved_list, failed_count = approve_all_pending_manual_checkins(admin_user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            sent_count = 0
            for approved_data in approved_list:
                try:
                    target_user_id = approved_data['user_id']
                    checkin_time_str = approved_data['checkin_time_str']

                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=TimesheetMessages.MANUAL_REQUEST_APPROVED.format(time=checkin_time_str)
                    )
                    sent_count += 1
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

            summary_message = AdminMessages.MASS_APPROVAL_COMPLETE.format(
                approved=len(approved_list),
                sent=sent_count,
                failed=failed_count
            )

            await query.edit_message_text(summary_message)
            context.user_data.clear()
            return ConversationHandler.END

        # === –û–î–û–ë–†–ï–ù–ò–ï –û–î–ù–û–ô –ó–ê–Ø–í–ö–ò ===
        elif callback_data_str.startswith("manual_approve:"):
            request_id = int(callback_data_str.split(":")[1])
            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –æ–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É #{request_id}")

            request_data = get_manual_checkin_request_by_id(request_id)
            if not request_data:
                await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END

            user_id = request_data['user_id']
            requested_time_str = request_data['requested_checkin_time']
            user_sector_key = request_data.get('application_department', 'unknown')

            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            try:
                final_dt = datetime.strptime(requested_time_str, '%Y-%m-%d %H:%M:%S')
                final_dt_moscow = MOSCOW_TZ.localize(final_dt)
            except ValueError:
                await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")
                return ConversationHandler.END

            success = approve_manual_checkin_request(
                request_id=request_id,
                admin_id=admin_user_id,
                final_checkin_time=final_dt_moscow,
                user_id=user_id,
                user_sector_key=user_sector_key
            )

            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=TimesheetMessages.MANUAL_REQUEST_APPROVED.format(time=requested_time_str)
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                user_name = request_data.get('application_full_name', f"ID {user_id}")
                success_msg = AdminMessages.MANUAL_REQUEST_APPROVED.format(
                    name=user_name,
                    action="–æ–¥–æ–±—Ä–µ–Ω–∞",
                    time=requested_time_str
                )
                await query.edit_message_text(success_msg)
            else:
                await query.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É #{request_id}")

            context.user_data.clear()
            return ConversationHandler.END

        # === –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ===
        elif callback_data_str.startswith("manual_reject:"):
            request_id = int(callback_data_str.split(":")[1])
            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É #{request_id}")

            request_data = get_manual_checkin_request_by_id(request_id)
            if not request_data:
                await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END

            user_id = request_data['user_id']

            success = reject_manual_checkin_request(request_id, admin_user_id)

            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=TimesheetMessages.MANUAL_REQUEST_REJECTED
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                user_name = request_data.get('application_full_name', f"ID {user_id}")
                await query.edit_message_text(
                    AdminMessages.MANUAL_REQUEST_REJECTED.format(name=user_name)
                )
            else:
                await query.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #{request_id}")

            context.user_data.clear()
            return ConversationHandler.END

        # === –ò–ó–ú–ï–ù–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò ===
        elif callback_data_str.startswith("manual_edit:"):
            request_id = int(callback_data_str.split(":")[1])
            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")

            request_data = get_manual_checkin_request_by_id(request_id)
            if not request_data:
                await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ #{request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return ConversationHandler.END

            context.user_data['manual_request_id_to_edit'] = request_id
            context.user_data['manual_request_user_id'] = request_data['user_id']
            context.user_data['manual_request_sector'] = request_data.get('application_department', 'unknown')

            await query.edit_message_text(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}\n"
                f"–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
                f"–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2025 09:00"
            )

            return AdminManualCheckinStates.ENTER_NEW_TIME

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback_data_str}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return AdminManualCheckinStates.LIST_REQUESTS

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_manual_request_action: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")
        context.user_data.clear()
        return ConversationHandler.END


async def receive_new_time_for_manual_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞—è–≤–∫–∏.
    """
    admin_user_id = update.effective_user.id
    new_time_input = update.message.text.strip()

    request_id = context.user_data.get('manual_request_id_to_edit')
    user_id = context.user_data.get('manual_request_user_id')
    user_sector = context.user_data.get('manual_request_sector')

    if not request_id or not user_id:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        context.user_data.clear()
        return ConversationHandler.END

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    is_valid, dt_obj, error_msg = validate_datetime_format(new_time_input, '%d.%m.%Y %H:%M')

    if not is_valid:
        await update.message.reply_text(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n{error_msg}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return AdminManualCheckinStates.ENTER_NEW_TIME

    try:
        final_dt_moscow = MOSCOW_TZ.localize(dt_obj)

        success = approve_manual_checkin_request(
            request_id=request_id,
            admin_id=admin_user_id,
            final_checkin_time=final_dt_moscow,
            user_id=user_id,
            user_sector_key=user_sector
        )

        if success:
            time_str = final_dt_moscow.strftime('%d.%m.%Y %H:%M')

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=TimesheetMessages.MANUAL_REQUEST_APPROVED.format(time=time_str)
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await update.message.reply_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –æ–¥–æ–±—Ä–µ–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º: {time_str}"
            )
        else:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É #{request_id}")

        context.user_data.clear()
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ receive_new_time_for_manual_request: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.")
        context.user_data.clear()
        return ConversationHandler.END


async def cancel_manual_checkins_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫."""
    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.clear()
    return ConversationHandler.END


# ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—É—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫
admin_manual_checkins_conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("admin_manual_checkins", admin_manual_checkins_start)
    ],
    states={
        AdminManualCheckinStates.LIST_REQUESTS: [
            CallbackQueryHandler(process_manual_request_action)
        ],
        AdminManualCheckinStates.ENTER_NEW_TIME: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, receive_new_time_for_manual_request)
        ],
    },
    fallbacks=[
        CommandHandler("cancel", cancel_manual_checkins_dialog)
    ],
    name="admin_manual_checkins_flow",
    per_user=True,
    per_chat=True,
    allow_reentry=True
)
