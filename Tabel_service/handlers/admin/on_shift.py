"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ.
"""
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from ...database import get_unique_user_departments, get_active_users_by_department
from ...utils import admin_required, AdminMessages
from ...keyboards import get_department_selection_keyboard

logger = logging.getLogger(__name__)


@admin_required
async def on_shift_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /on_shift - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ —Å–º–µ–Ω–µ.
    """
    logger.info(f"–ê–¥–º–∏–Ω {update.effective_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /on_shift")
    
    departments = get_unique_user_departments()
    
    if not departments:
        await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏.")
        return

    reply_markup = get_department_selection_keyboard(departments)
    await update.message.reply_text(AdminMessages.ON_SHIFT_SELECT_DEPT, reply_markup=reply_markup)


async def on_shift_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞.
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—ã–≤–æ–¥ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º.
    """
    query = update.callback_query
    await query.answer()

    try:
        command, _, department_choice = query.data.partition(':')

        if command == "on_shift_cancel":
            await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return
            
        logger.info(f"–ê–¥–º–∏–Ω {query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –Ω–∞ —Å–º–µ–Ω–µ –¥–ª—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞: {department_choice}")

        active_users = get_active_users_by_department(department_choice)

        display_header = "–í—Å–µ" if department_choice == "ALL" else department_choice
        message_text = f"<b>üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–∞ —Å–º–µ–Ω–µ (–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {display_header})</b>\n"

        if not active_users:
            message_text += "\n–ù–∞ —Å–º–µ–Ω–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç."
            await query.edit_message_text(text=message_text, parse_mode=ParseMode.HTML)
            return

        formatted_lines = {}
        
        for user in active_users:
            display_name = user['application_full_name'] or user['username'] or '–ë–µ–∑ –∏–º–µ–Ω–∏'

            try:
                from datetime import datetime
                checkin_dt = datetime.strptime(user['check_in_time'], '%Y-%m-%d %H:%M:%S')
                checkin_time_str = checkin_dt.strftime('%H:%M')
            except (ValueError, TypeError):
                checkin_time_str = "??:??"
            
            department = user['application_department'] or "–ë–µ–∑ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞"
            
            if department not in formatted_lines:
                formatted_lines[department] = []
            formatted_lines[department].append({'name': display_name, 'time': checkin_time_str})

        max_name_length = 0
        for dept_lines in formatted_lines.values():
            for line in dept_lines:
                if len(line['name']) > max_name_length:
                    max_name_length = len(line['name'])
        
        for department, employees in sorted(formatted_lines.items()):
            message_text += f"\n<b>{department}:</b>\n"
            
            table_rows = []
            for emp in employees:
                aligned_name = emp['name'].ljust(max_name_length)
                table_rows.append(f"<code>{aligned_name}  |  {emp['time']}</code>")
            
            message_text += "\n".join(table_rows)
            
        await query.edit_message_text(text=message_text, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ on_shift_button_press: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")