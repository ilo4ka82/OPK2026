"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from ...database import (
    list_pending_users,
    authorize_user,
    reject_application,
    get_user,
)
from ...utils import (
    admin_required,
    escape_markdown_v2,
    AdminMessages,
    TimesheetMessages,
    ITEMS_PER_PAGE,
)
from ...keyboards import get_pagination_keyboard

logger = logging.getLogger(__name__)


@admin_required
async def admin_pending_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /admin_pending_users - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    admin_user_id = update.effective_user.id
    logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    pending_users_list = list_pending_users()

    if not pending_users_list:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    await _send_pending_users_page(
        update=update,
        context=context,
        pending_users=pending_users_list,
        page=1,
        message_to_edit=None
    )


async def admin_action_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    
    –§–æ—Ä–º–∞—Ç—ã callback_data:
    - authorize_user:USER_ID
    - reject_user:USER_ID
    - paginate_list:PAGE:FOCUSED_USER_ID
    """
    query = update.callback_query
    await query.answer()

    callback_data_str = query.data
    admin_user_id = query.from_user.id

    try:
        # === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
        if callback_data_str.startswith("authorize_user:"):
            user_id_to_authorize = int(callback_data_str.split(":")[1])
            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_authorize}")

            success, message_from_db = authorize_user(user_id_to_authorize, admin_user_id)

            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await context.bot.send_message(
                        chat_id=user_id_to_authorize,
                        text=TimesheetMessages.APPLICATION_APPROVED_NOTIFICATION
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_authorize}")
                except Exception as e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_authorize}: {e}"
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                pending_users_list = list_pending_users()
                if pending_users_list:
                    await _send_pending_users_page(
                        update=update,
                        context=context,
                        pending_users=pending_users_list,
                        page=1,
                        message_to_edit=query.message
                    )
                else:
                    await query.edit_message_text(
                        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.\n\n–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                    )
            else:
                await query.edit_message_text(
                    escape_markdown_v2(message_from_db),
                    parse_mode=ParseMode.MARKDOWN_V2
                )

        # === –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ===
        elif callback_data_str.startswith("reject_user:"):
            user_id_to_reject = int(callback_data_str.split(":")[1])
            logger.info(f"–ê–¥–º–∏–Ω {admin_user_id} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_to_reject}")

            success, message_from_db = reject_application(user_id_to_reject, admin_user_id)

            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await context.bot.send_message(
                        chat_id=user_id_to_reject,
                        text=TimesheetMessages.APPLICATION_REJECTED_NOTIFICATION
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_reject}")
                except Exception as e:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_to_reject}: {e}"
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                pending_users_list = list_pending_users()
                if pending_users_list:
                    await _send_pending_users_page(
                        update=update,
                        context=context,
                        pending_users=pending_users_list,
                        page=1,
                        message_to_edit=query.message
                    )
                else:
                    await query.edit_message_text(
                        "üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
                    )
            else:
                await query.edit_message_text(
                    escape_markdown_v2(message_from_db),
                    parse_mode=ParseMode.MARKDOWN_V2
                )

        # === –ü–ê–ì–ò–ù–ê–¶–ò–Ø ===
        elif callback_data_str.startswith("paginate_list:"):
            parts = callback_data_str.split(":")
            new_page = int(parts[1])
            
            pending_users_list = list_pending_users()
            
            if pending_users_list:
                await _send_pending_users_page(
                    update=update,
                    context=context,
                    pending_users=pending_users_list,
                    page=new_page,
                    message_to_edit=query.message
                )
            else:
                await query.edit_message_text("–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")

        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data_str}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_action_callback_handler: {e}", exc_info=True)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.")


async def _send_pending_users_page(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    pending_users: list,
    page: int,
    message_to_edit=None
) -> None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    
    Args:
        update: Update –æ–±—ä–µ–∫—Ç
        context: Context –æ–±—ä–µ–∫—Ç
        pending_users: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        message_to_edit: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (None –¥–ª—è –Ω–æ–≤–æ–≥–æ)
    """
    total_users = len(pending_users)
    total_pages = (total_users + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

    if page < 1:
        page = 1
    if page > total_pages:
        page = total_pages

    start_index = (page - 1) * ITEMS_PER_PAGE
    end_index = start_index + ITEMS_PER_PAGE
    users_on_page = pending_users[start_index:end_index]

    message_lines = [f"üìã <b>–û–∂–∏–¥–∞—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Å—Ç—Ä. {page}/{total_pages}):</b>\n"]

    for user_data in users_on_page:
        user_id = user_data.get('telegram_id', 'N/A')
        username = user_data.get('username', 'N/A')
        first_name = user_data.get('first_name', '')
        last_name = user_data.get('last_name', '')
        full_name_from_app = user_data.get('application_full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        department = user_data.get('application_department', '–ù–µ —É–∫–∞–∑–∞–Ω')

        display_username = f"@{username}" if username and username != 'N/A' else f"ID: {user_id}"
        display_name = f"{first_name} {last_name}".strip() or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        message_lines.append(
            f"üë§ <b>{display_name}</b> ({display_username})\n"
            f"   üìù –§–ò–û: {full_name_from_app}\n"
            f"   üè¢ –°–µ–∫—Ç–æ—Ä: {department}\n"
        )

    message_text = "\n".join(message_lines)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_data in users_on_page:
        user_id = user_data['telegram_id']
        display_name = user_data.get('application_full_name', f"ID {user_id}")
        
        if len(display_name) > 20:
            display_name = display_name[:17] + "..."

        keyboard.append([
            InlineKeyboardButton(
                f"‚úÖ {display_name}",
                callback_data=f"authorize_user:{user_id}"
            ),
            InlineKeyboardButton(
                f"‚ùå {display_name}",
                callback_data=f"reject_user:{user_id}"
            )
        ])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        pagination_keyboard = get_pagination_keyboard(page, total_users, ITEMS_PER_PAGE)
        keyboard.extend(pagination_keyboard.inline_keyboard)

    reply_markup = InlineKeyboardMarkup(keyboard)

    if message_to_edit:
        await message_to_edit.edit_text(
            text=message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            text=message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )