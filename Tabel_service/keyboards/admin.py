"""
–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–∞–±–µ–ª—è.
"""
import math
from typing import List, Optional
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from ..utils import PREDEFINED_SECTORS, ITEMS_PER_PAGE


def get_department_selection_keyboard(departments: List[str]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—Ç–æ –Ω–∞ —Å–º–µ–Ω–µ.
    
    Args:
        departments: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
    """
    keyboard = []
    
    for department_name in departments:
        keyboard.append([
            InlineKeyboardButton(
                f"–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: {department_name}",
                callback_data=f"on_shift_dept:{department_name}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö", callback_data="on_shift_dept:ALL")
    ])
    keyboard.append([
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="on_shift_cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_sector_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–µ–∫—Ç–æ—Ä–æ–≤
    """
    keyboard = [
        [InlineKeyboardButton("–í—Å–µ —Å–µ–∫—Ç–æ—Ä—ã", callback_data="export_sector_ALL")]
    ]
    
    for sector_name in PREDEFINED_SECTORS:
        parts = sector_name.split()
        sector_key = parts[-1].upper() if len(parts) > 1 else sector_name.upper()
        
        keyboard.append([
            InlineKeyboardButton(sector_name, callback_data=f"export_sector_{sector_key}")
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_cancel_dialog")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_period_selection_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–µ—Ä–∏–æ–¥–æ–≤
    """
    keyboard = [
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="export_period_today")],
        [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="export_period_yesterday")],
        [InlineKeyboardButton("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="export_period_this_week")],
        [InlineKeyboardButton("–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", callback_data="export_period_last_week")],
        [InlineKeyboardButton("–≠—Ç–æ—Ç –º–µ—Å—è—Ü", callback_data="export_period_this_month")],
        [InlineKeyboardButton("–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data="export_period_last_month")],
        [InlineKeyboardButton("üóìÔ∏è –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="export_period_custom")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–∫ –≤—ã–±–æ—Ä—É —Å–µ–∫—Ç–æ—Ä–∞)", callback_data="export_back_to_sector_selection")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_cancel_dialog")]
    ]
    
    return InlineKeyboardMarkup(keyboard)


def get_files_keyboard(category: str, files: List[str]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è).
    
    Args:
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∞–π–ª–æ–≤
        files: –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ñ–∞–π–ª–æ–≤
    """
    keyboard = []
    
    for filename in files:
        display_name = filename
        if len(display_name) > 40:
            display_name = display_name[:37] + "..."
        
        keyboard.append([
            InlineKeyboardButton(
                f"üìÑ {display_name}",
                callback_data=f"file_{category}_{filename}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def get_pagination_keyboard(
    current_page: int,
    total_items: int,
    items_per_page: int = ITEMS_PER_PAGE,
    focused_user_id: Optional[int] = None
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.
    
    Args:
        current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        total_items: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        items_per_page: –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        focused_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ–∫—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    total_pages = math.ceil(total_items / items_per_page)
    keyboard = []
    
    pagination_row = []
    focused_id_for_callback = focused_user_id if focused_user_id else 0
    
    if current_page > 1:
        pagination_row.append(
            InlineKeyboardButton(
                "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"paginate_list:{current_page-1}:{focused_id_for_callback}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è)
    pagination_row.append(
        InlineKeyboardButton(
            f"–°—Ç—Ä. {current_page}/{total_pages}",
            callback_data="_"
        )
    )
    
    if current_page < total_pages:
        pagination_row.append(
            InlineKeyboardButton(
                "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"paginate_list:{current_page+1}:{focused_id_for_callback}"
            )
        )
    
    if pagination_row:
        keyboard.append(pagination_row)
    
    return InlineKeyboardMarkup(keyboard)


def get_category_selection_keyboard(categories: dict) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è).
    
    Args:
        categories: –°–ª–æ–≤–∞—Ä—å {category_key: category_display_name}
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    keyboard = []
    
    buttons = []
    for category_id, category_name in categories.items():
        buttons.append(
            InlineKeyboardButton(
                category_name,
                callback_data=f"select_cat_{category_id}"
            )
        )
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            keyboard.append([buttons[i], buttons[i + 1]])
        else:
            keyboard.append([buttons[i]])
    
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="select_cat_cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)
