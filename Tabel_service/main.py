"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Ç–∞–±–µ–ª—è.
"""
import logging
import sys
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

from .config import TimesheetConfig
from .database import init_db
from .handlers import (
    application_conv_handler,
    checkin_command,
    checkout_command,
    location_handler,
    manual_checkin_conv_handler,
)
from .handlers.admin import (
    admin_authorize_command,
    on_shift_command,
    on_shift_button_press,
    admin_pending_users_command,
    admin_action_callback_handler,
    admin_manual_checkins_conv_handler,
    export_conv_handler,
    edit_checkout_conv_handler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("tabel_bot.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ httpx
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


async def start_command(update, context):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —Ç–∞–±–µ–ª—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    """
    from .database import get_user, add_or_update_user, is_user_authorized
    from .utils import TimesheetMessages
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    
    user = update.effective_user
    user_id = user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    add_or_update_user(
        telegram_id=user_id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    user_data = get_user(user_id)
    is_admin = TimesheetConfig.is_admin(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_admin or is_user_authorized(user_id):
        status = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)" if is_admin else "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
        
        welcome_message = TimesheetMessages.WELCOME_AUTHORIZED.format(
            name=user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            user_id=user_id,
            status=status
        )
        
        await update.message.reply_text(
            welcome_message,
            parse_mode='Markdown'
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands_text = (
            "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
            "üë§ **–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n"
            "/checkin - –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥\n"
            "/checkout - –û—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥\n"
            "/request_manual_checkin - –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä—É—á–Ω—É—é –æ—Ç–º–µ—Ç–∫—É\n\n"
        )
        
        if is_admin:
            commands_text += (
                "üëë **–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**\n"
                "/admin_pending_users - –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç—É–ø\n"
                "/admin_authorize USER_ID - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/admin_manual_checkins - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä—É—á–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
                "/on_shift - –ö—Ç–æ –Ω–∞ —Å–º–µ–Ω–µ\n"
                "/export_attendance - –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏\n"
                "/edit_checkout - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —É—Ö–æ–¥–∞\n"
            )
        
        await update.message.reply_text(commands_text, parse_mode='Markdown')
        
    elif user_data and user_data.get('application_status') == 'pending':
        welcome_message = TimesheetMessages.WELCOME_PENDING.format(
            name=user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        await update.message.reply_text(welcome_message)
        
    else:
        welcome_message = TimesheetMessages.WELCOME_NEW.format(
            name=user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="apply_for_access")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_markup
        )


async def help_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    from .database import is_user_authorized
    
    user_id = update.effective_user.id
    is_admin = TimesheetConfig.is_admin(user_id)
    is_authorized = is_user_authorized(user_id)
    
    if not (is_admin or is_authorized):
        await update.message.reply_text(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏."
        )
        return
    
    help_text = (
        "üìã **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Ç–∞–±–µ–ª—è:**\n\n"
        "üë§ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/checkin - –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è)\n"
        "/checkout - –û—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥\n"
        "/request_manual_checkin - –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä—É—á–Ω—É—é –æ—Ç–º–µ—Ç–∫—É –ø—Ä–∏—Ö–æ–¥–∞\n\n"
    )
    
    if is_admin:
        help_text += (
            "üëë **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
            "/admin_pending_users - –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            "/admin_authorize USER_ID - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID\n"
            "/admin_manual_checkins - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä—É—á–Ω—É—é –æ—Ç–º–µ—Ç–∫—É\n"
            "/on_shift - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ç–æ –Ω–∞ —Å–º–µ–Ω–µ\n"
            "/export_attendance - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel\n"
            "/edit_checkout - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n"
        )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        init_db()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        application = Application.builder().token(TimesheetConfig.TELEGRAM_BOT_TOKEN).build()
        
        # === –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ ===
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
        application.add_handler(CommandHandler("checkin", checkin_command))
        application.add_handler(CommandHandler("checkout", checkout_command))
        application.add_handler(MessageHandler(filters.LOCATION, location_handler))
        
        # === CONVERSATION HANDLERS ===
        application.add_handler(application_conv_handler)
        application.add_handler(manual_checkin_conv_handler)
        
        # === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===
        application.add_handler(CommandHandler("admin_authorize", admin_authorize_command))
        application.add_handler(CommandHandler("on_shift", on_shift_command))
        application.add_handler(CommandHandler("admin_pending_users", admin_pending_users_command))
        
        # === –ê–î–ú–ò–ù–°–ö–ò–ï CONVERSATION HANDLERS ===
        application.add_handler(admin_manual_checkins_conv_handler)
        application.add_handler(export_conv_handler)
        application.add_handler(edit_checkout_conv_handler)
        
        # === CALLBACK HANDLERS ===
        application.add_handler(CallbackQueryHandler(on_shift_button_press, pattern="^on_shift_"))
        application.add_handler(CallbackQueryHandler(admin_action_callback_handler, pattern="^(authorize_user|reject_user|paginate_list):"))
        
        logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∞–±–µ–ª—è...")
        application.run_polling(allowed_updates=["message", "callback_query"])
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    main()
