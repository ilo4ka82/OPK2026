import os
from aiogram import types, Dispatcher  
from aiogram.dispatcher import FSMContext
from config import config
from keyboards import (
    get_handbook_menu, 
    get_category_keyboard_inline,
    get_files_keyboard,
    get_categories
)
from states import BotStates

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in config.ADMIN_USERS

async def handbook_menu_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"""
    
    text = message.text
    user_id = message.from_user.id
    admin = is_admin(user_id)
    
    # ===== –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) =====
    
    if text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        if not admin:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                reply_markup=get_handbook_menu(admin)
            )
            return
        
        await message.answer(
            "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>diplomy</code>, <code>lgoty</code>, <code>bvi</code>\n\n"
            "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏: –æ—Ç–º–µ–Ω–∞</i>",
            parse_mode="HTML"
        )
        await BotStates.handbook_creating_category.set()
        return
    
    # ===== –ó–ê–ì–†–£–ó–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) =====
    
    elif text == "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç":
        if not admin:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                reply_markup=get_handbook_menu(admin)
            )
            return
        
        await message.answer(
            "üìÇ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:",
            parse_mode="HTML",
            reply_markup=get_category_keyboard_inline()
        )
        await BotStates.handbook_uploading.set()
        return
    
    # ===== –ü–†–û–°–ú–û–¢–† –ö–ê–¢–ï–ì–û–†–ò–ô =====
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = get_categories()
    
    for category_id, category_name in categories.items():
        if text == category_name:
            await show_category_files(message, category_id, admin)
            return
    
    # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É
    await message.answer(
        "‚ùì –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é",
        reply_markup=get_handbook_menu(admin)
    )

async def show_category_files(message: types.Message, category: str, admin: bool):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    
    category_dir = os.path.join(config.DOCUMENTS_DIR, category)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not os.path.exists(category_dir):
        os.makedirs(category_dir, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    files = sorted([
        f for f in os.listdir(category_dir) 
        if os.path.isfile(os.path.join(category_dir, f))
    ])
    
    categories = get_categories()
    category_name = categories.get(category, f"üìÅ {category}")
    
    if not files:
        await message.answer(
            f"üìÇ <b>{category_name}</b>\n\n"
            f"–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            parse_mode="HTML",
            reply_markup=get_handbook_menu(admin)
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        f"üìÇ <b>{category_name}</b>\n\n"
        f"üìÑ –§–∞–π–ª–æ–≤: {len(files)}\n\n"
        f"–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=get_files_keyboard(category)
    )

# ===== –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ò =====

async def create_category_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    
    user_id = message.from_user.id
    admin = is_admin(user_id)
    
    if not admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")
        await BotStates.handbook_menu.set()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text and message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∏—Ç—å", "cancel"]:
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_handbook_menu(admin)
        )
        await BotStates.handbook_menu.set()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    
    # –ï—Å–ª–∏ –µ—â–µ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if not data.get("category_id"):
        category_id = message.text.strip().lower()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        if not category_id.replace("_", "").replace("-", "").isalnum():
            await message.answer(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ:\n"
                "‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã (a-z)\n"
                "‚Ä¢ –¶–∏—Ñ—Ä—ã (0-9)\n"
                "‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ (_) –∏–ª–∏ –¥–µ—Ñ–∏—Å (-)\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        category_dir = os.path.join(config.DOCUMENTS_DIR, category_id)
        
        if os.path.exists(category_dir):
            await message.answer(
                f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è <code>{category_id}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
                f"–ü—Ä–∏–¥—É–º–∞–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º category_id –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        await state.update_data(category_id=category_id)
        
        await message.answer(
            f"‚úÖ –°–∏—Å—Ç–µ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <code>{category_id}</code>\n\n"
            f"üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ <b>–∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> (–∫–∞–∫ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ü–µ–Ω–∏—Å –∏ –≤–∞–≥–∏–Ω–∞</i>, <i>–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è</i>\n\n"
            f"<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏: –æ—Ç–º–µ–Ω–∞</i>",
            parse_mode="HTML"
        )
        return
    
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å category_id - –∑–Ω–∞—á–∏—Ç –≤–≤–æ–¥–∏–º display_name
    category_id = data.get("category_id")
    display_name = message.text.strip()
    
    if not display_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
    category_dir = os.path.join(config.DOCUMENTS_DIR, category_id)
    
    try:
        os.makedirs(category_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è –≤ config (–≤ —Ñ–∞–π–ª)
        config_file = os.path.join(config.DOCUMENTS_DIR, "_category_names.txt")
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        category_names = {}
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if '=' in line:
                        key, value = line.strip().split('=', 1)
                        category_names[key] = value
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        category_names[category_id] = display_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(config_file, 'w', encoding='utf-8') as f:
            for key, value in category_names.items():
                f.write(f"{key}={value}\n")
        
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üìÅ –°–∏—Å—Ç–µ–º–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <code>{category_id}</code>\n"
            f"üìù –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫: <b>{display_name}</b>\n"
            f"üìÇ –ü—É—Ç—å: <code>{category_dir}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ –Ω–µ—ë –¥–æ–∫—É–º–µ–Ω—Ç—ã!",
            parse_mode="HTML",
            reply_markup=get_handbook_menu(admin)
        )
        
        # –û—á–∏—â–∞–µ–º state
        await state.finish()
        await BotStates.handbook_menu.set()
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}",
            reply_markup=get_handbook_menu(admin)
        )
        await state.finish()
        await BotStates.handbook_menu.set()

# ===== –ó–ê–ì–†–£–ó–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í =====

async def category_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    
    if callback.data == "upload_cat_cancel":
        await callback.message.edit_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await callback.answer()
        
        user_id = callback.from_user.id
        admin = is_admin(user_id)
        
        await callback.message.answer(
            "üìö –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ –±—é—Ä–æ",
            reply_markup=get_handbook_menu(admin)
        )
        await BotStates.handbook_menu.set()
        return
    
    category = callback.data.replace("upload_cat_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ state
    await state.update_data(upload_category=category)
    
    categories = get_categories()
    category_name = categories.get(category, f"üìÅ {category}")
    
    await callback.message.edit_text(
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n\n"
        f"üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX, TXT, XLS –∏ –¥—Ä.)\n\n"
        f"<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏: –æ—Ç–º–µ–Ω–∞</i>",
        parse_mode="HTML"
    )
    await callback.answer()
    
    await BotStates.handbook_waiting_file.set()

async def document_upload_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    
    user_id = message.from_user.id
    admin = is_admin(user_id)
    
    if not admin:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        await BotStates.handbook_menu.set()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text and message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∏—Ç—å", "cancel"]:
        await message.answer(
            "‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_handbook_menu(admin)
        )
        await BotStates.handbook_menu.set()
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
    if not message.document:
        await message.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç.\n"
            "–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª (PDF, DOCX –∏ –¥—Ä.)\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏: <b>–æ—Ç–º–µ–Ω–∞</b>",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    category = data.get("upload_category", "other")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç
    category_dir = os.path.join(config.DOCUMENTS_DIR, category)
    os.makedirs(category_dir, exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    document = message.document
    file_name = document.file_name
    file_path = os.path.join(category_dir, file_name)
    
    try:
        await document.download(destination_file=file_path)
        
        categories = get_categories()
        category_name = categories.get(category, f"üìÅ {category}")
        
        await message.answer(
            f"‚úÖ <b>–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
            f"üìÑ –§–∞–π–ª: <code>{file_name}</code>\n"
            f"üíæ –†–∞–∑–º–µ—Ä: {document.file_size / 1024:.1f} –ö–ë",
            parse_mode="HTML",
            reply_markup=get_handbook_menu(admin)
        )
        
        await BotStates.handbook_menu.set()
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}",
            reply_markup=get_handbook_menu(admin)
        )
        await BotStates.handbook_menu.set()

# ===== –°–ö–ê–ß–ò–í–ê–ù–ò–ï –§–ê–ô–õ–û–í =====

async def file_download_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    if callback.data == "back_to_handbook":
        await callback.message.delete()
        await callback.answer()
        
        user_id = callback.from_user.id
        admin = is_admin(user_id)
        
        await callback.message.answer(
            "üìö –°–ø—Ä–∞–≤–æ—á–Ω–æ–µ –±—é—Ä–æ",
            reply_markup=get_handbook_menu(admin)
        )
        return
    
    # –ü–∞—Ä—Å–∏–º callback_data: file_category_index
    parts = callback.data.split("_", 2)
    if len(parts) < 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    category = parts[1]
    file_index = int(parts[2])  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∑–∞–Ω–æ–≤–æ
    category_dir = os.path.join(config.DOCUMENTS_DIR, category)
    
    if not os.path.exists(category_dir):
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    files = sorted([
        f for f in os.listdir(category_dir) 
        if os.path.isfile(os.path.join(category_dir, f))
    ])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–Ω—ã–π
    if file_index >= len(files):
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    filename = files[file_index]  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    file_path = os.path.join(category_dir, filename)
    
    if not os.path.exists(file_path):
        await callback.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'rb') as doc:
            await callback.message.answer_document(
                doc,
                caption=f"üìÑ {filename}"
            )
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"""
    
    # –ú–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
    dp.register_message_handler(
        handbook_menu_handler, 
        state=BotStates.handbook_menu
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    dp.register_message_handler(
        create_category_handler,
        state=BotStates.handbook_creating_category
    )
    
    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (inline –∫–Ω–æ–ø–∫–∏)
    dp.register_callback_query_handler(
        category_callback_handler,
        lambda c: c.data.startswith("upload_cat_"),
        state=BotStates.handbook_uploading
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    dp.register_message_handler(
        document_upload_handler,
        content_types=types.ContentType.ANY,
        state=BotStates.handbook_waiting_file
    )
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (inline –∫–Ω–æ–ø–∫–∏)
    dp.register_callback_query_handler(
        file_download_callback,
        lambda c: c.data.startswith("file_") or c.data == "back_to_handbook",
        state="*"
    )