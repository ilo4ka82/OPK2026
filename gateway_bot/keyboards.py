import os
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from config import config

def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    keyboard.row(
        KeyboardButton("ü§ñ AI-–ø–æ–º–æ—â–Ω–∏–∫"),
        KeyboardButton("üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫")
    )
    keyboard.row(
        KeyboardButton("‚è∞ –¢–∞–±–µ–ª—å"),
        KeyboardButton("üîß –¢–µ—Ö.—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
    )
    
    return keyboard

def get_back_button():
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def get_ai_menu():
    """–ú–µ–Ω—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    keyboard.row(
        KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    )
    keyboard.row(
        KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    keyboard.add(KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    return keyboard

def get_handbook_menu():
    """–ú–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    keyboard.row(
        KeyboardButton("üìÑ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–µ–º–∞"),
    )
    keyboard.row(
        KeyboardButton("üìñ –ú–µ—Ç–æ–¥–∏—á–∫–∏"),
        KeyboardButton("üí° FAQ")
    )
    keyboard.row(
        KeyboardButton("üìÅ –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    )
    keyboard.add(KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    return keyboard

def get_timesheet_menu():
    """–ú–µ–Ω—é —Ç–∞–±–µ–ª—è"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    keyboard.row(
        KeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        KeyboardButton("‚è∏Ô∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–±–æ—Ç—É")
    )
    keyboard.row(
        KeyboardButton("‚òï –ü–µ—Ä–µ—Ä—ã–≤"),
        KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    keyboard.add(KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    return keyboard

def get_tech_menu():
    """–ú–µ–Ω—é —Ç–µ—Ö.—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    keyboard.row(
        KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç"),
        KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    )
    keyboard.row(
        KeyboardButton("‚öôÔ∏è –°–∫—Ä–∏–ø—Ç—ã"),
        KeyboardButton("üìÅ –§–∞–π–ª—ã")
    )
    keyboard.add(KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    return keyboard

def get_handbook_menu(is_admin=False):
    """–ú–µ–Ω—é —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ (—Ä–∞–∑–Ω–æ–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø–∞–ø–æ–∫
    categories = get_categories()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    category_buttons = []
    for category_id, category_name in categories.items():
        category_buttons.append(KeyboardButton(category_name))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(category_buttons), 2):
        if i + 1 < len(category_buttons):
            keyboard.row(category_buttons[i], category_buttons[i + 1])
        else:
            keyboard.add(category_buttons[i])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if is_admin:
        keyboard.row(
            KeyboardButton("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"),
            KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        )
    
    keyboard.add(KeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    
    return keyboard

def get_categories():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø–∞–ø–æ–∫"""
    docs_dir = config.DOCUMENTS_DIR
    
    if not os.path.exists(docs_dir):
        os.makedirs(docs_dir, exist_ok=True)
    
    # –ß–∏—Ç–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∏–º–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
    config_file = os.path.join(docs_dir, "_category_names.txt")
    custom_names = {}
    
    if os.path.exists(config_file):
        with open(config_file, 'r', encoding='utf-8') as f:
            for line in f:
                if '=' in line:
                    key, value = line.strip().split('=', 1)
                    custom_names[key] = value
    
    categories = {}
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫–∏ –≤ documents/
    for folder in os.listdir(docs_dir):
        folder_path = os.path.join(docs_dir, folder)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
        if folder.startswith("_"):
            continue
        
        if os.path.isdir(folder_path):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if folder in custom_names:
                display_name = f"üìÅ {custom_names[folder]}"
            # –ò–Ω–∞—á–µ –±–µ—Ä–µ–º –∏–∑ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
            elif folder in config.DOCUMENT_CATEGORIES:
                display_name = config.DOCUMENT_CATEGORIES[folder]
            # –ò–Ω–∞—á–µ –¥–µ–ª–∞–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
            else:
                display_name = f"üìÅ {folder.replace('_', ' ').title()}"
            
            categories[folder] = display_name
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
    if not categories:
        categories = {
            "pravila": "üìÑ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–µ–º–∞",
            "metodichki": "üìñ –ú–µ—Ç–æ–¥–∏—á–∫–∏",
        }
    
    return categories

def get_category_keyboard_inline():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (inline)"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    categories = get_categories()
    
    buttons = []
    for category_id, category_name in categories.items():
        buttons.append(
            InlineKeyboardButton(
                category_name, 
                callback_data=f"upload_cat_{category_id}"
            )
        )
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons), 2):
        if i + 1 < len(buttons):
            keyboard.row(buttons[i], buttons[i + 1])
        else:
            keyboard.add(buttons[i])
    
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cat_cancel")
    )
    
    return keyboard

def get_files_keyboard(category: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (inline)"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    category_dir = os.path.join(config.DOCUMENTS_DIR, category)
    
    if not os.path.exists(category_dir):
        return keyboard
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã
    files = sorted([
        f for f in os.listdir(category_dir) 
        if os.path.isfile(os.path.join(category_dir, f))
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    for filename in files:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
        display_name = filename
        if len(display_name) > 40:
            display_name = display_name[:37] + "..."
        
        keyboard.add(
            InlineKeyboardButton(
                f"üìÑ {display_name}",
                callback_data=f"file_{category}_{filename}"
            )
        )
    
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_handbook")
    )
    
    return keyboard

